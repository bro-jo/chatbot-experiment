{"version":3,"sources":["component/ChatBalloon.tsx","data/converstaion.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["renderContents","chat","imageUri","className","src","alt","text","includes","split","map","t","ChatBalloon","key","isFromMe","isSystem","author","classNames","conversations","App","inputEl","useRef","chatContainerEl","chatContainerBottomEl","useState","conversation","setConversation","disableInput","setDisableInput","step","setStep","showModal","setShowModal","useEffect","current","focus","openModal","useCallback","setTimeout","forEach","c","i","slice","scrollToBottom","length","closeModal","scrollIntoView","behavior","sendMessage","value","toLowerCase","localStorage","setItem","number","parseInt","replace","conversationWithMine","concat","currentConversation","m","e","_","upperFirst","getItem","err","console","error","onClick","Modal","size","show","onHide","aria-labelledby","stopPropagation","animation","Body","type","color","height","width","ref","filter","toUpperCase","disabled","onKeyDown","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.779a40bb.chunk.js","sourcesContent":["import React, { useCallback, useContext, useMemo, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport '../component/chatBalloon.css';\n\nconst renderContents: any = ({ chat, imageUri }: any) => {\n    if (imageUri) {\n        return (\n            <div\n                className=\"pointer\"\n                // onClick={() => window.open(imageUri)}\n            >\n                <img src={imageUri} alt=\"chat_img\" />\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {chat.text && chat.text.includes('\\n')\n                ? chat.text.split('\\n').map((t: any) => (\n                      <span>\n                          {t}\n                          <br />\n                      </span>\n                  ))\n                : chat.text}\n        </div>\n    );\n};\n\nexport const ChatBalloon = ({ key, chat, isFromMe, isSystem }: any) => {\n    const imageUri = chat.imageUri;\n\n    if (isSystem) {\n        return (\n            <div key={key} className=\"chat-balloon text-center\">\n                <div className=\"chat-balloon--author chat-system\">{chat.author}</div>\n                <div>\n                    <div className=\"chat-balloon--wrapper d-inline-block\">\n                        <div\n                            className={classNames('chat-balloon--box chat-system', {\n                                'chat-balloon--box-image': imageUri,\n                            })}\n                        >\n                            {renderContents({ chat, imageUri })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    if (isFromMe === false) {\n        return (\n            <div key={key} className=\"chat-balloon text-left\">\n                <div className=\"chat-balloon--author chat-opponent\">{chat.author}</div>\n                <div>\n                    <div className=\"chat-balloon--wrapper d-inline-block\">\n                        <div\n                            className={classNames('chat-balloon--box chat-opponent', {\n                                'chat-balloon--box-image': imageUri,\n                            })}\n                        >\n                            {renderContents({ chat, imageUri })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div key={key} className=\"chat-balloon text-right\">\n            <div className=\"chat-balloon--author\">{chat.author}</div>\n            <div className=\"chat-balloon--wrapper\">\n                <div\n                    className={classNames('chat-balloon--box', {\n                        'chat-balloon--box-image': imageUri,\n                    })}\n                >\n                    {renderContents({ chat, imageUri })}\n                </div>\n            </div>\n        </div>\n    );\n};\n","export const conversations = [\n    [\n        {\n            author: 'SYSTEM',\n            text: 'HI. Alex, an automated chat-bot, will be with you shortly to assist you.',\n        },\n        {\n            author: 'Alex',\n            text:\n                'Hi! I’m Alex, an automated chat-bot. I’m happy to help you with your purchase. We have all different types of cameras, from inexpensive digital compacts to high-end DSLRs.\\n' +\n              'In order to ensure that I make the most suitable recommendations for you, I’d like to ask you some questions.',\n        },\n        {\n            author: 'Alex',\n            text: 'Is this purchase for you or is this a gift?',\n        },\n    ],\n    [\n        {\n            author: 'Alex',\n            text:\n                'Okay, so, you’d like to buy a camera for a gift. I’d be glad to help you find a camera.',\n        },\n        {\n            author: 'Alex',\n            text:\n                'What type of camera are you looking for? Are you looking for a point-and-shoot camera or DSLR?',\n        },\n        // {\n        //     author: 'Alex',\n        //     imageUri: '/image/notebooks1.png',\n        // },\n    ],\n    [\n        {\n            author: 'Alex',\n            text:\n                'Okay, so you are looking for a point-and-shoot camera as a gift. Okay, let me ask another question',\n        },\n        {\n            author: 'Alex',\n            text: 'Which brand do you prefer? We have \"Nikon\", \"Sony\", \"Canon\".',\n        },\n    ],\n    [\n        {\n            author: 'Alex',\n            text: 'Okay, Great choice!',\n        },\n        {\n            author: 'Alex',\n            text: 'What is your price range? Over $1700? Or Below $1700?',\n        },\n    ],\n    [\n        {\n            author: 'Alex',\n            text: 'Okay, you’d like to buy a *camera/brand* camera',\n        },\n        {\n            author: 'Alex',\n            text: 'Please give me a moment, and I’ll look for the best digital camera for you',\n        },\n        {\n            author: 'Alex',\n            text:\n                'Based on your preferences, I’ve located the best digital camera. Please see the following details about the digital camera.',\n        },\n        {\n            author: 'Alex',\n            text:\n                'We at Digital World hope you’ll like this recommendation and that our advice will help you make an informed decision about which camera best fits your needs.',\n        },\n        {\n            author: 'Alex',\n            text: 'Thank you!',\n        },\n    ],\n];\n","import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Modal from 'react-bootstrap/Modal';\nimport { ChatBalloon } from './component/ChatBalloon';\nimport { conversations } from './data/converstaion';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n// @ts-ignore\nimport Loader from 'react-loader-spinner';\nimport classNames from 'classnames';\nimport _ from 'lodash'\n\nlet keywords = [\n    'Laptop',\n    'Desktop',\n    'Men’s Shoes',\n    'Women’s Shoes',\n    'Ex1',\n    'Ex2',\n    'Ex3',\n    'Ex4',\n    'Ex5',\n    'Ex6',\n    'Ex7',\n    'Ex8',\n];\n\nconst INTERVAL_TIME = 3100;\n\nconst App: React.FC = () => {\n    const inputEl = useRef(null);\n    const chatContainerEl = useRef(null);\n    const chatContainerBottomEl = useRef(null);\n    const [conversation, setConversation] = useState([] as any);\n    const [disableInput, setDisableInput] = useState(false);\n    const [step, setStep] = useState(0);\n    const [showModal, setShowModal] = useState(false);\n    useEffect(() => {\n        if (!disableInput && inputEl && inputEl.current) {\n            (inputEl.current as any).focus();\n        }\n    }, [inputEl, disableInput]);\n    const openModal = useCallback(() => {\n        setTimeout(() => {\n            setDisableInput(true);\n            conversations[0].forEach((c, i) => {\n                setTimeout(() => {\n                    setConversation(conversations[0].slice(0, i + 1));\n                    scrollToBottom();\n                    if (i === conversations[0].length - 1) {\n                        setDisableInput(false);\n                    }\n                }, i * INTERVAL_TIME);\n            });\n        }, 300);\n        setShowModal(true);\n    }, []);\n    const closeModal = useCallback(() => setShowModal(false), []);\n    const scrollToBottom = () => {\n        setTimeout(\n            () => (chatContainerBottomEl.current as any).scrollIntoView({ behavior: 'smooth' }),\n            500,\n        );\n    };\n    const sendMessage = useCallback(() => {\n        const value: string = (inputEl && inputEl.current && (inputEl.current as any).value) as any;\n        if (!value) {\n            return;\n        }\n\n        try {\n            setDisableInput(true);\n            (inputEl.current as any).value = '';\n\n            if (value.toLowerCase() === 'sony' || value.toLowerCase() === 'nikon' || value.toLowerCase() === 'canon') {\n                localStorage.setItem('camera/brand', value);\n            }\n            const number = parseInt(value.replace(/\\D/g,''), 10);\n            if (value.includes('below') || value.includes('under') || (number < 1700 && number > 100)) {\n                localStorage.setItem('camera/price', 'below');\n            }\n            if (value.includes('over') || (number > 1700 && number < 99999999)) {\n                localStorage.setItem('camera/price', 'over');\n            }\n\n            const conversationWithMine = conversation.concat({ author: 'Me', text: value });\n            setConversation(conversationWithMine);\n            scrollToBottom();\n            setTimeout(() => {\n                let currentConversation = conversationWithMine;\n                if (!conversations[step + 1]) {\n                    setDisableInput(false);\n                    scrollToBottom();\n                    return;\n                }\n\n                conversations[step + 1].forEach((m, i) => {\n                    setTimeout(() => {\n                        const c = conversations[step + 1]\n                          .slice(0, i + 1)\n                          .map(e => {\n                              e.text = e.text.replace('*camera/brand*', _.upperFirst(localStorage.getItem('camera/brand') || ''));\n                              return e;\n                          });\n                        setConversation(\n                            currentConversation.concat(c),\n                        );\n                        scrollToBottom();\n                        if (i === conversations[step + 1].length - 1) {\n                            setDisableInput(false);\n                        }\n                    }, i * INTERVAL_TIME);\n                });\n                setStep(step + 1);\n                scrollToBottom();\n            }, INTERVAL_TIME);\n        } catch (err) {\n            console.error(err);\n            setDisableInput(false);\n        }\n    }, [step, conversation, inputEl]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-bg\">\n                <div className=\"logo\" />\n                <div className=\"mainCamera-container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-5 camera-bg\" />\n                        <div className=\"col-sm-7\">\n                            <div className=\"mx-5 mt-5 mb-3\">\n                                <h3 className=\"mainMessage\">Find Your Perfect Camera</h3>\n                            </div>\n                            <div className=\"mx-5 mt-2 mb-2\">\n                                <h5 className=\"subMessage\">\n                                    Start counseling with our AI agent Alex for great\n                                    recommendations on digital cameras, from point and shoot to\n                                    DSLR.\n                                </h5>\n                            </div>\n                            <p className=\"mx-5 mt-4 mb-2 text-left\">\n                                <div className=\"button main-button\" onClick={() => openModal()}>\n                                    START CONVERSATION\n                                </div>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-5 mx-0 px-0\">\n                    <div className=\"col-sm-4 text-center feature\">\n                        <div className=\"logo-wrapper m-2 text-center\">\n                            <div className=\"logo-shipping\" />\n                        </div>\n                        <p className=\"inShort m-2\">FREE SHIPPING</p>\n                        <p className=\"description m-1\">\n                            Change the sentence to: Free next-day delivery on thousands of items.\n                        </p>\n                    </div>\n                    <div className=\"col-sm-4 text-center feature\">\n                        <div className=\"logo-wrapper m-2 text-center\">\n                            <div className=\"logo-return\" />\n                        </div>\n                        <p className=\"inShort m-2\">FREE RETURNS</p>\n                        <p className=\"description m-1\">\n                            You may return any item purchased on Digital World.\n                        </p>\n                    </div>\n                    <div className=\"col-sm-4 text-center feature\">\n                        <div className=\"logo-wrapper m-2 text-center\">\n                            <div className=\"logo-support\" />\n                        </div>\n                        <p className=\"inShort m-2\">CUSTOMER SUPPORT</p>\n                        <p className=\"description m-1\">\n                            Manage your account, check order status or access the Digital World customer support.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row my-5 py-5 mx-0 my-0\">&nbsp;</div>\n            </div>\n            {/*<div className=\"App-overlay\" />*/}\n            {showModal && (\n                <div\n                    className=\"App-container\"\n                    // onClick={() => !showModal && alert('쇼핑 기능 준비 중')}\n                >\n                    <div>\n                        {/*<div*/}\n                        {/*    className={classNames('keyword-box', { 'display-none': showModal })}*/}\n                        {/*    onClick={e => e.stopPropagation()}*/}\n                        {/*>*/}\n                        {/*    {keywords.map(e => (*/}\n                        {/*        <Keyword key={e} text={e} onClick={() => openModal()} />*/}\n                        {/*    ))}*/}\n                        {/*</div>*/}\n                        <Modal\n                            size=\"lg\"\n                            show={showModal}\n                            onHide={() => closeModal()}\n                            aria-labelledby=\"example-modal-sizes-title-lg\"\n                            onClick={(e: any) => e.stopPropagation()}\n                            animation={false}\n                        >\n                            <Modal.Body>\n                                <div className=\"avatar-image\" />\n                                {disableInput && (\n                                    <div className=\"chat-processing\">\n                                        <Loader\n                                            type=\"ThreeDots\"\n                                            color=\"#23549C\"\n                                            height={40}\n                                            width={40}\n                                        />\n                                        processing...\n                                    </div>\n                                )}\n                                <div ref={chatContainerEl} className=\"chat-container\">\n                                    {conversation\n                                        .filter((e: any) => e && e.author)\n                                        .map((e: any, i: number) => (\n                                            <ChatBalloon\n                                                key={`chat-${i}`}\n                                                isSystem={e.author.toUpperCase() === 'SYSTEM'}\n                                                isFromMe={e.author.toUpperCase() === 'ME'}\n                                                chat={e}\n                                            />\n                                        ))}\n                                    <div ref={chatContainerBottomEl} />\n                                </div>\n                            </Modal.Body>\n                            <div\n                                className={classNames('chat-input-box', {\n                                    disableInput: disableInput,\n                                })}\n                            >\n                                <input\n                                    ref={inputEl}\n                                    disabled={disableInput}\n                                    onKeyDown={e => {\n                                        if (e.key === 'Enter') {\n                                            sendMessage();\n                                        }\n                                    }}\n                                    onSubmit={() => sendMessage()}\n                                />\n                                <div className=\"search-btn\" onClick={() => sendMessage()}>\n                                    <div className=\"search-icon\" />\n                                </div>\n                            </div>\n                        </Modal>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}