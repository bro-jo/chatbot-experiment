{"version":3,"sources":["component/ChatBalloon.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["renderContents","chat","imageUri","className","src","alt","text","includes","split","map","t","ChatBalloon","key","isFromMe","isSystem","author","classNames","App","useState","showModal","setShowModal","onClick","Modal","size","show","onHide","aria-labelledby","e","stopPropagation","animation","Body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAIMA,G,MAAsB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SACjC,OAAIA,EAEI,yBACIC,UAAU,WAGV,yBAAKC,IAAKF,EAAUG,IAAI,cAMhC,6BACKJ,EAAKK,MAAQL,EAAKK,KAAKC,SAAS,MAC3BN,EAAKK,KAAKE,MAAM,MAAMC,KAAI,SAACC,GAAD,OACtB,8BACKA,EACD,iCAGRT,EAAKK,QAKVK,EAAc,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,IAAKX,EAAoC,EAApCA,KAAMY,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,SACzCZ,EAAWD,EAAKC,SAEtB,OAAIY,EAEI,yBAAKF,IAAKA,EAAKT,UAAU,4BACrB,yBAAKA,UAAU,oCAAoCF,EAAKc,QACxD,6BACI,yBAAKZ,UAAU,wCACX,yBACIA,UAAWa,IAAW,gCAAiC,CACnD,0BAA2Bd,KAG9BF,EAAe,CAAEC,OAAMC,kBAQ/B,IAAbW,EAEI,yBAAKD,IAAKA,EAAKT,UAAU,0BACrB,yBAAKA,UAAU,sCAAsCF,EAAKc,QAC1D,6BACI,yBAAKZ,UAAU,wCACX,yBACIA,UAAWa,IAAW,kCAAmC,CACrD,0BAA2Bd,KAG9BF,EAAe,CAAEC,OAAMC,iBAS5C,yBAAKU,IAAKA,EAAKT,UAAU,2BACrB,yBAAKA,UAAU,wBAAwBF,EAAKc,QAC5C,yBAAKZ,UAAU,yBACX,yBACIA,UAAWa,IAAW,oBAAqB,CACvC,0BAA2Bd,KAG9BF,EAAe,CAAEC,OAAMC,iBCwM7Be,EA/PO,WAAO,IAAD,EACUC,oBAAS,GADnB,mBACjBC,EADiB,KACNC,EADM,KAKxB,OACI,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,YACX,uBAAGA,UAAU,kBACT,wBAAIA,UAAU,eAAd,gCAEJ,uBAAGA,UAAU,kBACT,wBAAIA,UAAU,cAAd,8HAKJ,uBAAGA,UAAU,4BACT,yBACIA,UAAU,qBACVkB,QAAS,kBAvBjBD,GAAa,KAqBT,gBAUhB,yBAAKjB,UAAU,sBACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,mBAEnB,uBAAGA,UAAU,eAAb,iBACA,uBAAGA,UAAU,mBAAb,8HAKJ,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,iBAEnB,uBAAGA,UAAU,eAAb,gBACA,uBAAGA,UAAU,mBAAb,8HAKJ,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,kBAEnB,uBAAGA,UAAU,eAAb,oBACA,uBAAGA,UAAU,mBAAb,+HAMR,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,SAGHgB,GACG,yBACIhB,UAAU,iBAGV,6BASI,kBAACmB,EAAA,EAAD,CACIC,KAAK,KACLC,KAAML,EACNM,OAAQ,kBAxFPL,GAAa,IAyFdM,kBAAgB,+BAChBL,QAAS,SAACM,GAAD,OAAYA,EAAEC,mBACvBC,WAAW,GAEX,kBAACP,EAAA,EAAMQ,KAAP,KACI,yBAAK3B,UAAU,iBACf,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CACIW,UAAQ,EACRb,KAAM,CACFc,OAAQ,SACRT,KAAM,8EAId,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KACI,8FAGZ,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KACI,iDAGZ,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,KACRT,KAAM,wBAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,uGAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,iIAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CAAEc,OAAQ,OAAQb,SAAU,2BAEtC,kBAAC,EAAD,CACIW,UAAU,EACVZ,KAAM,CACFc,OAAQ,KACRT,KAAM,mBAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,wGAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,kGAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,KACRT,KAAM,8BAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,yBAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,2DAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,KACRT,KAAM,qBAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,0EAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,qFAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,sIAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,wKAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,OACRT,KAAM,gBAGd,kBAAC,EAAD,CACIO,UAAU,EACVZ,KAAM,CACFc,OAAQ,KACRT,KAAM,oBAKtB,yBAAKH,UAAU,kBACX,gCACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBCjQ/B4B,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.752dd9c1.chunk.js","sourcesContent":["import React, { useCallback, useContext, useMemo, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport '../component/chatBalloon.css';\n\nconst renderContents: any = ({ chat, imageUri }: any) => {\n    if (imageUri) {\n        return (\n            <div\n                className=\"pointer\"\n                // onClick={() => window.open(imageUri)}\n            >\n                <img src={imageUri} alt=\"chat_img\" />\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {chat.text && chat.text.includes('\\n')\n                ? chat.text.split('\\n').map((t: any) => (\n                      <span>\n                          {t}\n                          <br />\n                      </span>\n                  ))\n                : chat.text}\n        </div>\n    );\n};\n\nexport const ChatBalloon = ({ key, chat, isFromMe, isSystem }: any) => {\n    const imageUri = chat.imageUri;\n\n    if (isSystem) {\n        return (\n            <div key={key} className=\"chat-balloon text-center\">\n                <div className=\"chat-balloon--author chat-system\">{chat.author}</div>\n                <div>\n                    <div className=\"chat-balloon--wrapper d-inline-block\">\n                        <div\n                            className={classNames('chat-balloon--box chat-system', {\n                                'chat-balloon--box-image': imageUri,\n                            })}\n                        >\n                            {renderContents({ chat, imageUri })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    if (isFromMe === false) {\n        return (\n            <div key={key} className=\"chat-balloon text-left\">\n                <div className=\"chat-balloon--author chat-opponent\">{chat.author}</div>\n                <div>\n                    <div className=\"chat-balloon--wrapper d-inline-block\">\n                        <div\n                            className={classNames('chat-balloon--box chat-opponent', {\n                                'chat-balloon--box-image': imageUri,\n                            })}\n                        >\n                            {renderContents({ chat, imageUri })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div key={key} className=\"chat-balloon text-right\">\n            <div className=\"chat-balloon--author\">{chat.author}</div>\n            <div className=\"chat-balloon--wrapper\">\n                <div\n                    className={classNames('chat-balloon--box', {\n                        'chat-balloon--box-image': imageUri,\n                    })}\n                >\n                    {renderContents({ chat, imageUri })}\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport classNames from 'classnames';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { Keyword } from './component/Keyword';\nimport { ChatBalloon } from './component/ChatBalloon';\n\nlet keywords = [\n    'Laptop',\n    'Desktop',\n    'Men’s Shoes',\n    'Women’s Shoes',\n    'Ex1',\n    'Ex2',\n    'Ex3',\n    'Ex4',\n    'Ex5',\n    'Ex6',\n    'Ex7',\n    'Ex8',\n];\n\nconst App: React.FC = () => {\n    const [showModal, setShowModal] = useState(false);\n    const openModal = () => setShowModal(true);\n    const closeModal = () => setShowModal(false);\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-bg\">\n                <div className=\"logo\" />\n                <div className=\"mainCamera-container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-5 camera-bg\" />\n                        <div className=\"col-sm-7\">\n                            <p className=\"mx-5 mt-5 mb-3\">\n                                <h3 className=\"mainMessage\">Finding Your Perfect Camera</h3>\n                            </p>\n                            <p className=\"mx-5 mt-2 mb-2\">\n                                <h5 className=\"subMessage\">\n                                    Loren ipsum dolor sit amet, consectetur adipiscing elit.\n                                    Phasellus at iaculis quam. Integer accumsan tincidunt fringilla.\n                                </h5>\n                            </p>\n                            <p className=\"mx-5 mt-4 mb-2 text-left\">\n                                <div\n                                    className=\"button main-button\"\n                                    onClick={() => openModal()}\n                                >\n                                    SHOP NOW\n                                </div>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-5 mx-0 px-0\">\n                    <div className=\"col-sm-4 text-center feature\">\n                        <div className=\"logo-wrapper m-2 text-center\">\n                            <div className=\"logo-shipping\" />\n                        </div>\n                        <p className=\"inShort m-2\">FREE SHIPPING</p>\n                        <p className=\"description m-1\">\n                            Loren ipsum dolor sit amet, consectetur adipiscing elit. Phasellus at\n                            iaculis quam. Integer accumsan tincidunt fringilla.\n                        </p>\n                    </div>\n                    <div className=\"col-sm-4 text-center feature\">\n                        <div className=\"logo-wrapper m-2 text-center\">\n                            <div className=\"logo-return\" />\n                        </div>\n                        <p className=\"inShort m-2\">FREE RETURNS</p>\n                        <p className=\"description m-1\">\n                            Loren ipsum dolor sit amet, consectetur adipiscing elit. Phasellus at\n                            iaculis quam. Integer accumsan tincidunt fringilla.\n                        </p>\n                    </div>\n                    <div className=\"col-sm-4 text-center feature\">\n                        <div className=\"logo-wrapper m-2 text-center\">\n                            <div className=\"logo-support\" />\n                        </div>\n                        <p className=\"inShort m-2\">CUSTOMER SUPPORT</p>\n                        <p className=\"description m-1\">\n                            Loren ipsum dolor sit amet, consectetur adipiscing elit. Phasellus at\n                            iaculis quam. Integer accumsan tincidunt fringilla.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n                <div className=\"row my-5 py-5\">&nbsp;</div>\n            </div>\n            {/*<div className=\"App-overlay\" />*/}\n            {showModal && (\n                <div\n                    className=\"App-container\"\n                    // onClick={() => !showModal && alert('쇼핑 기능 준비 중')}\n                >\n                    <div>\n                        {/*<div*/}\n                        {/*    className={classNames('keyword-box', { 'display-none': showModal })}*/}\n                        {/*    onClick={e => e.stopPropagation()}*/}\n                        {/*>*/}\n                        {/*    {keywords.map(e => (*/}\n                        {/*        <Keyword key={e} text={e} onClick={() => openModal()} />*/}\n                        {/*    ))}*/}\n                        {/*</div>*/}\n                        <Modal\n                            size=\"lg\"\n                            show={showModal}\n                            onHide={() => closeModal()}\n                            aria-labelledby=\"example-modal-sizes-title-lg\"\n                            onClick={(e: any) => e.stopPropagation()}\n                            animation={false}\n                        >\n                            <Modal.Body>\n                                <div className=\"avatar-image\" />\n                                <div className=\"chat-container\">\n                                    <ChatBalloon\n                                        isSystem\n                                        chat={{\n                                            author: 'SYSTEM',\n                                            text: 'HI. Alex, an automated chat-bot, ' +\n                                                'will be with you shortly to assist you.',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Alex',\n                                            text:\n                                                'Hi! I’m Alex, an automated chat-bot. I’m happy to help you with your purchase.',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Alex',\n                                            text:\n                                                'Is this purchase for you or is this a gift?',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={true}\n                                        chat={{\n                                            author: 'Me',\n                                            text: 'This is for a gift',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Okay, so, you’d like to buy a camera for a gift. I’d be glad to help you find a camera.',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'What type of camera are you looking for? Are you looking for a DSLR, a compact digital camera, or a point-and-shoot camera?',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{ author: 'Andy', imageUri: '/image/notebooks1.png' }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={true}\n                                        chat={{\n                                            author: 'Me',\n                                            text: 'um.. left one',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Okay, so you are looking for a point-and-shoot camera as a gift. Okay, let me ask another question',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Which brand do you prefer? We have “xx”, “cc”, and “dd” brands',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={true}\n                                        chat={{\n                                            author: 'Me',\n                                            text: 'I prefer “xx”.',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Okay, Great choice!',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'What is your price range? Over $1700? Or Below $1700?',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={true}\n                                        chat={{\n                                            author: 'Me',\n                                            text: 'Less than $1700',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Okay, you’d like to buy a Canon point-and-shoot digital camera ',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Please give me a moment, and I’ll look for the best digital camera for you',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Based on your preferences, I’ve located the best digital camera. Please see the following details about the digital camera.',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'We at Digital World hope you’ll like this recommendation and that our advice will help you make an informed decision about which camera best fits your needs.',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={false}\n                                        chat={{\n                                            author: 'Andy',\n                                            text: 'Thank you!',\n                                        }}\n                                    />\n                                    <ChatBalloon\n                                        isFromMe={true}\n                                        chat={{\n                                            author: 'Me',\n                                            text: 'Thank you :)',\n                                        }}\n                                    />\n                                </div>\n                            </Modal.Body>\n                            <div className=\"chat-input-box\">\n                                <input />\n                                <div className=\"search-btn\">\n                                    <div className=\"search-icon\" />\n                                </div>\n                            </div>\n                        </Modal>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}